'use strict';

import React from 'react';
import { connect } from 'react-redux';
import withQueryParams from 'react-router-query-params';
import { withRouter } from 'react-router-dom';
import { login, mfaTokenFetch, redirectWithToken, verify } from '../../actions';
import PropTypes from 'prop-types';
import LoadingOverlay from '../LoadingIndicator/loading-overlay';
import ErrorReport from '../Errors/report';
import Header from '../Header/header';
import Modal from 'react-bootstrap/Modal';
import QRCode from 'react-qr-code';
import config from '../../config';
import ourConfigureStore from '../../store/configureStore';
import { saveToken, deleteToken } from '../../utils/auth';
import './auth.css';
// unused import but this adds nasa png image to the build as we use png image for email notification
import nasaLogo from '../../../assets/images/nasa-logo.png';

class Auth extends React.Component {
  constructor (props) {
    super(props);
    this.store = ourConfigureStore({});
    this.state = {
      body: '',
      showQr: false,
      showMobile: true,
      showBrowser: false
    };
    this.clickLogin = this.clickLogin.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  async handleSubmit() {
    const { api, dispatch, queryParams } = this.props;
    const { inflight, tokens } = api;
    const { code } = queryParams;
    if (tokens.token!== null && document.getElementById('totp')?.value !== '') {
      dispatch(verify(document.getElementById('totp').value, tokens.token)).then(value => {
        const resp = value;
        let error = resp?.data?.error || resp?.error || resp?.data?.[0]?.error || resp?.message
        if (error && !config.environment.match(/LOCALHOST/g)) {
          console.log(`An error has occurred: ${error}.`);
        } else {
          deleteToken();
          saveToken({ token: tokens.token, user: tokens.user });
          this.setState({ body: ''});
          if (!inflight && code) {
            window.location.href = config.basepath;
          } 
        }
      })
    } 
  }

  async componentDidMount () {
    const { dispatch, api, queryParams } = this.props;
    const { inflight, tokens } = api;
    const { code, state, redirect } = queryParams;
    if (this.store.getState().api.authenticated) {
      redirectWithToken();
    } else if (!inflight && code) {
      const { data } = await dispatch(mfaTokenFetch(code, state))
      const { token, user } = data;
      if (!('mfaSecretCode' in data)) {
        window.localStorage.setItem('auth-token', token);
        const updatedUsr = (Object.keys(user).length > 0 ? {...user, ...{authenticated: true}} : user);
        window.localStorage.setItem('auth-user', JSON.stringify(updatedUsr));
        window.location.href = config.basepath;
      } else this.setState({ body: this.renderQrCode(data.mfaSecretCode, user.username, user.issuer)});
    }
  }

  clickLogin () {
    const { dispatch, queryParams } = this.props;
    const { redirect } = queryParams;
    dispatch(login(redirect || 'dashboard'));
  }

  renderQrCode (secretCode, username, issuer) {
    const qrPrefix = `otpauth://totp/${issuer.replace(/(^\w+:|^)\/\//, '')}:${username}?secret=`;
    return (
      <div style={{ textAlign: "left" }}>
      <div className="eui-info-box">
        <h2>Welcome to Earthdata Pub</h2>
        <p>
          Earthdata Pub uses Multifactor Authentication (MFA). MFA is a security
          system that requires users to provide two or more verification factors
          to gain access to an account or system. These factors typically
          include something you know (like a password) and something you have
          (like a smartphone or security token). MFA is important because it
          adds an extra layer of protection, significantly reducing the risk of
          unauthorized access even if one factor, such as a password, is
          compromised.
        </p>
        <p style={{ marginTop: "1rem" }}>
          To access your account with MFA, you'll need to enter a Time-Based
          One-Time Password (TOTP) each time you log in. The TOTP is a short,
          temporary code generated by an authentication app, such as Google
          Authenticator, Authy, Microsoft Authenticator, or Duo. These apps work
          best with a smartphone, but some can work with an internet browser.
          <div style={{ textDecoration: "underline", display: "inline" }}>
            After this initial setup, you will be prompted to enter the
            temporary code each time you login to the Earthdata Pub Dashboard.
          </div>
        </p>
      </div>
      {this.state.showMobile && (
        <div>
          <h2>Steps to Set Up MFA on a Smartphone</h2>
          <ol>
            <li>
              <div className="inline-title">
                Download an Authentication App:
              </div>{" "}
              Install any TOTP-compatible app on your mobile device, such as
              Google Authenticator, Authy, Microsoft Authenticator, or Duo.
            </li>
            <li>
              <div className="inline-title">
                Open the Authentication App and Use It to Scan the QR Code:
              </div>{" "}
              <button onClick={() => setShowQr(true)}>
                CLICK HERE FOR THE QR CODE.
              </button>{" "}
              If you can't scan the QR code, manually enter the following
              alphanumeric code into your app: {secretCode} Depending on the app
              you choose, there may be additional steps.
            </li>
            <li>
              <div className="inline-title">
                Get Your Code:
              </div>{" "}
              After scanning the QR code or entering the setup code, your
              authenticator app will generate a one-time password (a 6-digit
              code).
            </li>
            <li>
              <div className="inline-title">
                Enter the Code:
              </div>{" "}
              Type the one-time password from your app into the field below and
              click "Submit."
            </li>
            <li>
              <a
                href="javascript:feedback.showForm();"
                title="Send feedback using feedback form."
              >
                Contact us
              </a>{" "}
              if your encounter any problems.
            </li>
          </ol>
          <h3>
            (Using a Smartphone is recommended. Click{" "}
            <button
              onClick={() => {
                this.setState({
                  showMobile: false,
                  showBrowser: true,
                  showQr: false
                });
              }}
            >
              here
            </button>{" "}
            for instructions for setting up a browser-based authenticator.)
          </h3>
        </div>
      )}
      {this.state.showBrowser && (
        <div>
          <h2>Method 2: Steps to Set Up a Browser-Based Authentication App:</h2>
          <p>
            An internet search should reveal options for a browser-based or web
            extension authentication app.
          </p>
          <ol>
            <li>
              <div className="inline-title">
                Install the App:
              </div>{" "}
              Download and install the browser-based authentication app or add a
              trusted authentication extension to your browser.
            </li>
            <li>
              <div className="inline-title">
                Open the App:
              </div>{" "}
              Launch the authentication app in your browser or on your computer.
            </li>
            <li>
              <div className="inline-title">
                Add a New Account:
              </div>{" "}
              In the authentication app, look for an option like "Add Account"
              or "Set Up."
            </li>
            <li>
              <div className="inline-title">
                Enter the Setup Code:
              </div>{" "}
              <ul>
                <li>Manually enter the setup code: {secretCode}</li>
                <li>
                  <div className="inline-title">
                    Get Your Authentication Code:
                  </div>{" "}
                  Once the account is added, the app will generate a time-based
                  one-time password (TOTP), usually a 6-digit code that updates
                  every 30 seconds.
                </li>
              </ul>
            </li>
            <li>
              <div className="inline-title">
                Enter the Code:
              </div>{" "}
              Enter the 6-digit code from the app here.
              <input
                type="text"
                name="totp"
                id="totp"
                autoFocus="autofocus"
                className="default"
                style={{ width: "20%" }}
              />
              <button
                className={
                  "button button--submit button__animation--md button__arrow button__arrow--md button__animation button__arrow--white"
                }
                aria-label="submit your user"
                data-disable-with="TOTP"
                onClick={this.handleSubmit}
              >
                Submit
              </button>
            </li>
            <li>
              <a
                href="javascript:feedback.showForm();"
                title="Send feedback using feedback form."
              >
                Contact us
              </a>{" "}
              if your encounter any problems.
            </li>
          </ol>
          <h3>
            (Using a Smartphone is recommended. Click{" "}
            <button
              onClick={() => {
                this.setState({
                  showMobile: false,
                  showBrowser: true,
                  showQr: false
                });
              }}
            >
              here
            </button>{" "}
            for instructions for setting up a mobile-based authenticator.)
          </h3>
        </div>
      )}
      <div>
        {this.state.showQr && (
          <div
            style={{
              height: "auto",
              margin: "0 auto",
              maxWidth: 150,
              width: "100%",
            }}
          >
            <QRCode
              size={500}
              style={{
                height: "auto",
                maxWidth: "100%",
                width: "100%",
                marginTop: "2rem",
              }}
              value={`${qrPrefix}${secretCode}`}
              viewBox={"0 0 500 500"}
            />
          </div>
        )}
        {this.state.showMobile && (
          <>
            <p>
              <label htmlFor="totp">
                Enter Authentication Code from Verification App{" "}
              </label>
              <br />
              <input
                type="text"
                name="totp"
                id="totp"
                autoFocus="autofocus"
                className="default"
                style={{ width: "20%" }}
              />
            </p>
            <p style={{ marginTop: "1rem" }}>
              <button
                className={
                  "button button--submit button__animation--md button__arrow button__arrow--md button__animation button__arrow--white"
                }
                aria-label="submit your user"
                data-disable-with="TOTP"
                onClick={this.handleSubmit}
              >
                Submit
              </button>
            </p>
          </>
        )}
      </div>
    </div>
    );
  }

  render () {
    const { dispatch, api, apiVersion, queryParams } = this.props;
    const { code, token } = queryParams;
    const showLoginButton = !this.store.getState().api.authenticated && !api.inflight && !code && !token;
    const showAuthMessage = (api.inflight || code || token) && this.store.getState().api.authenticated;

    return (
      <div className='app'>
        <Header dispatch={dispatch} api={api} apiVersion={apiVersion} minimal={true} />
        <main className='main' role='main'>
          <div className="modal-content">
            <Modal
              dialogClassName="oauth-modal"
              show={true}
              centered
              size={this.state.body ? 'xl': 'sm'}
              aria-labelledby="modal__oauth-modal"
            >
              <Modal.Header className="oauth-modal__header"></Modal.Header>
              <Modal.Title id="modal__oauth-modal" className="oauth-modal__title">Welcome To Earthdata Pub Dashboard</Modal.Title>
              <Modal.Body>
              {(!showLoginButton && this.state.body == '') || showAuthMessage ? 
                  <div><LoadingOverlay/></div> : null}
                {showAuthMessage &&
                  <div>
                    <h2 className='heading--medium'>
                      Authenticating...
                    </h2>
                  </div>
                }
                {api.error && <ErrorReport report={api.error} />}
                {this.state.body !== '' ? this.state.body : null}
              </Modal.Body>
              <Modal.Footer>
                {showLoginButton &&
                  <button className="button button--oauth" onClick={this.clickLogin}>Login to Earthdata Pub</button>
                }
              </Modal.Footer>
            </Modal>
          </div>
        </main>
      </div>
    );
  }
}

Auth.propTypes = {
  dispatch: PropTypes.func,
  api: PropTypes.object,
  location: PropTypes.object,
  history: PropTypes.object,
  apiVersion: PropTypes.object,
  queryParams: PropTypes.object
};

export default withRouter(withQueryParams()(connect(state => state)(Auth)));
